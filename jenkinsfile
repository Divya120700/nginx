currentBuild.displayName = "nginx-with-host-info: #" + currentBuild.number
pipeline {
    agent any

    stages {
        stage('Remove Existing Containers') {
            steps {
                script {
                    try {
                        // sh "docker rm -f \$(docker ps -q)"
                        echo "Containers removed successfully"
                    } catch (Exception e) {
                        echo "No running containers to remove"
                    }
                }
            }
        }

        stage('Build and Test') {
            environment {
                DOCKER_IMAGE_NAME = 'host-info-img'
                DOCKER_IMAGE_TAG = 'latest'
                HOST_PORT = 8041
                CONTAINER_PORT = 80
                PATH = "/usr/local/bin/docker-v:$PATH"
            }

            steps {
                script {
                    sh "docker build . -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                }
                script {
                    // Run Docker container
                    //sh "docker run -itd -p ${HOST_PORT}:${CONTAINER_PORT} -v /proc:/host/proc:ro -v /etc:/host/etc:ro  ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                    sh "docker run  -itd -p ${HOST_PORT}:${CONTAINER_PORT} -v /etc/localtime:/etc/localtime:ro --name c3 ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} "
                    // sh "docker run  -itd -p ${HOST_PORT}:${CONTAINER_PORT} ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                }
            }
        }

    }
}

// =====================================================================
// pipeline {
//     agent any

//     stages {
       
//         stage('Remove Existing Containers') {
//             steps {
//                 script {
//                     // This command will remove the existing running containers
//                     sh "docker rm -f \$(docker ps -q)"
//                     echo "remove"
//                 }
//             }
//         }

//         stage('Build and Test') {
//             steps {
//                 script {
//                    // dockerImage = docker.build("docker-image:latest")
//                    sh "docker build . -t  docker-image:latest"
//                 }
//                 script {
//                     sh "docker run -itd -p 8057:80 docker-image:latest"
//                 }
//             }
//         }

//         stage('Testing container') {
//             steps {
//                 script {
//                     sh "curl http://10.196.153.137:8057"
//                 }
//             }
//         }
//     }
// }
